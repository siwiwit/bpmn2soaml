-- @path SOAML=/BPMN2SOAML/BPMN2SOAML/OUT/soaMl.ecore
-- @nsURI BPMN=http://stp.eclipse.org/bpmn


module BPMN2SOAML3;
create OUT: SOAML from IN: BPMN;


entrypoint rule Metamodel() {
	to
		t: SOAML!Model (
			packagedElement <- BPMN!BpmnDiagram.allInstances() -> collect(a | thisModule.t0(a)),
			packagedElement <- BPMN!Pool.allInstances() -> collect(a | thisModule.t1(a))
		)
	do {	thisModule.Model <- t;	}
}


lazy rule t0{
	from
		X0: BPMN!BpmnDiagram
	to
		Y0: SOAML!Collaboration (
			name <- X0.name
		),
		Z0: SOAML!ServicesArchitecture (
			baseCollaboration <- Y0
		)
}


lazy rule t1
{
	from
	X1 :BPMN!Pool
	to
	Y1 : SOAML!Class (name <- X1.name),
	Z1 : SOAML!Participant (baseClass <- Y1)
	do
	{
		Sequence{Y1};
		thisModule.r1(X1,Y1);
		
	}
	
}


rule r1(X1: BPMN!Pool,Y1: SOAML!Class)
{
	do
	{
		for (c in BPMN!Pool.allInstances())
		{
			if (X1 <> c)
			{
				for (i in X1.vertices)
				{
					if (i.outgoingMessages.size() > 0)
					{
						thisModule.r2(X1,i,c,Y1);
					}
				}
			}
		}
	}
}


rule r2(X1: BPMN!Pool,X2:BPMN!Vertex,X3:BPMN!Pool,Y1:SOAML!Class)
{
	do
	{
		for (c in X3.vertices)
		{
			for (i in X2.outgoingMessages)
			{
				for (j in c.incomingMessages)
				{
					if (i = j)
					{
						thisModule.t2(i,Y1);
					}
				}
			}
		}
	}
}


rule t2(X1:BPMN!MessagingEdge,Y1:SOAML!Class)
{
	to
	Q1 : SOAML!CollaborationUse (name <- X1.name),
	T1 : SOAML!Usage (supplier <- Q1, client <- Y1),
	R1 : SOAML!ServiceContract (collaborationUse <- Q1)
	
}
